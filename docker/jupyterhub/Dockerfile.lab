ARG BASE_IMAGE=ubuntu:24.04
FROM ${BASE_IMAGE}

LABEL maintainer="Statistics Norway"

# ------------------------------------------------------------------------------
# Set up base environment
# ------------------------------------------------------------------------------
USER root

SHELL ["/bin/bash", "-c"]
ENV SHELL="/bin/bash"
ENV DEBIAN_FRONTEND="noninteractive"

# Setup user & workspace
ENV USERNAME="jovyan"
ENV UID="1000"
ENV GROUPNAME="users"
ENV GID="100"
ENV HOME="/home/${USERNAME}"
ENV WORKSPACE_DIR="${HOME}/work"
ENV TZ=Europe/Oslo

# Create user and setup workspace
RUN groupmod -g ${GID} ${GROUPNAME} && \
    # If user by ID 1000 already exists, remove it so we can re-create it
    if id -u ${UID} >/dev/null 2>&1; then userdel -r $(getent passwd ${UID} | cut -d: -f1); fi && \
    # Setup custom user with sudo rights
    useradd ${USERNAME} --uid=${UID} -g ${GROUPNAME} --groups sudo -r --no-log-init --create-home && \
    # Create workspace
    mkdir -p ${WORKSPACE_DIR} && \
    # Disable default sudo message when opening shell
    touch ${HOME}/.sudo_as_admin_successful

# Set timezone to Oslo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Configure locale
RUN apt-get update && apt-get install -y locales \
    && echo "nb_NO.UTF-8 UTF-8" >> /etc/locale.gen \
    && locale-gen nb_NO.UTF-8 \
    && update-locale LANG=nb_NO.UTF-8

# Make sudo passwordless
RUN echo '${USERNAME} ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

# Set up PATH
ENV PATH="${PATH}:${HOME}/.local/bin:${HOME}/.krew/bin:${HOME}/work/.local/pipx/bin"

# Set locales
ENV LANG=nb_NO.UTF-8
ENV LANGUAGE=nb_NO:nb
ENV LC_ALL=nb_NO.UTF-8

# Set common codestyle settings and update old users with possible new files from /etc/skel
RUN mkdir /etc/skel/.config && \
    mkdir -p /usr/local/bin/before-notebook.d && \
    echo 'tar -cf - -C /etc/skel . | tar --skip-old-files --directory "$HOME" -xf -' \
    > /usr/local/bin/before-notebook.d/sync-skel.sh && \
    chmod +x /usr/local/bin/before-notebook.d/sync-skel.sh

COPY ./common-pycodestyle /etc/skel/.config/pycodestyle

WORKDIR ${WORKSPACE_DIR}

# ------------------------------------------------------------------------------
# Setup system dependencies and configurations
# ------------------------------------------------------------------------------
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    wget \
    bzip2 \
    ca-certificates \
    fonts-liberation \
    run-one \
    curl \
    git \
    gnupg \
    lsb-release \
    software-properties-common \
    alien \
    libaio-dev \
    libgit2-dev \
    libbz2-dev \
    libfontconfig1-dev \
    libfreetype6-dev \
    libpng-dev \
    libtiff5-dev \
    libjpeg-dev \
    libharfbuzz-dev \
    libfribidi-dev \
    libopenblas-dev \
    libglpk-dev \
    libpoppler-cpp-dev \
    libv8-dev \
    libnode-dev \
    && apt-get clean \
    && chown -R ${USERNAME}:${GROUPNAME} ${HOME} \
    && rm -rf /var/lib/apt/lists/*

# ------------------------------------------------------------------------------
# R and Java installation and configuration
# ------------------------------------------------------------------------------

ARG R_VERSION="4.4.0"
ENV R_VERSION=${R_VERSION}
ENV R_HOME="/usr/local/lib/R"
ENV DEFAULT_USER="${USERNAME}"

# Java configuration
ARG JAVA_VERSION="17"
ENV JAVA_VERSION=${JAVA_VERSION}
ENV JAVA_HOME="/usr/lib/jvm/java-$JAVA_VERSION-openjdk-amd64"
ENV PATH="${JAVA_HOME}/bin:${PATH}"


# Apache Arrow configuration
ARG ARROW_VERSION="18.1.0"
ENV ARROW_VERSION=${ARROW_VERSION}

# Use RStudio's package manager to download packages as binaries
ENV CRAN="https://packagemanager.posit.co/cran/__linux__/noble/latest"

COPY ./scripts /opt/scripts/
RUN chmod +x -R /opt/scripts/ && \
    chown -R ${USERNAME}:${GROUPNAME} /opt/scripts/ && \
    chmod -R 700 /opt/scripts/ && \
    ls -la /opt/scripts/

# Clone and prepare R installation scripts
RUN mkdir -p /rocker_scripts && \
    git clone --branch R${R_VERSION} --depth 1 https://github.com/rocker-org/rocker-versioned2.git /tmp/rocker-versioned2 && \
    cp -r /tmp/rocker-versioned2/scripts/* /rocker_scripts/ && \
    rm -rf /tmp/rocker-versioned2 && \
    chown -R ${USERNAME}:${GROUPNAME} /rocker_scripts/ && \
    chmod -R 700 /rocker_scripts/ && \
    ls -la /rocker_scripts/ \

# Copy jwsacruncher
COPY ./jwsacruncher-2.2.4.zip /tmp/jwsacruncher-2.2.4.zip

# Install R from source and link jwsacruncher
RUN /rocker_scripts/install_R_source.sh && \
    # Install java \
    /opt/scripts/install-java.sh && \
    # Setting up R with specific version
    /rocker_scripts/setup_R.sh && \
    # Re-install system libs that may have been removed by autoremove in rocker scripts
    /opt/scripts/install-system-libs.sh && \
    # Install additional system libs needed by R packages
    /opt/scripts/install-system-libs-R.sh && \
    # Install R packages \
    /opt/scripts/install-r-packages.sh && \
    # install arrow
    /opt/scripts/install-arrow.sh && \
    # Install jwsacruncher
    unzip /tmp/jwsacruncher-2.2.4.zip -d /opt && rm -f /tmp/jwsacruncher-2.2.4.zip && \
    # Create symlink to jwsacruncher
    ln -s /opt/jwsacruncher-2.2.4/bin/jwsacruncher /usr/bin/jwsacruncher && \
    # Fix permissions
    chown -R ${USERNAME}:${GROUPNAME} ${HOME} ${R_HOME}

RUN sed -i "/^PATH=/c\PATH=$PATH" "$R_HOME/etc/Renviron.site"

# ------------------------------------------------------------------------------
# Python/Conda installation and configuration
# ------------------------------------------------------------------------------
ARG PYTHON_VERSION="311"
ENV PYTHON_VERSION=${PYTHON_VERSION}

# Set template version for ssb-project-cli
ENV STAT_TEMPLATE_DEFAULT_REFERENCE="1.5.1"
ENV PYTHONPATH=/ssb/bruker/felles/pythonForSsb
ENV FELLES=/ssb/bruker/felles

# Set Dapla environment variables used to identify the service.
ENV DAPLA_SERVICE=JUPYTERLAB
ENV DAPLA_REGION=ON_PREM

# Install additional system packages
RUN apt-get update -y && \
     apt-get install -y --no-install-recommends \
     iputils-ping \
     build-essential \
     pandoc \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*

ARG CONDA_DIR=/opt/conda
ENV CONDA_DIR=${CONDA_DIR}
ENV PATH="${CONDA_DIR}/bin:${PATH}"

# Install miniconda
RUN curl -L https://repo.anaconda.com/miniconda/Miniconda3-py${PYTHON_VERSION}_24.4.0-0-Linux-x86_64.sh -o conda-python.sh && \
    chmod +x conda-python.sh && \
    ./conda-python.sh -b -p $CONDA_DIR && \
    rm -f conda-python.sh

# Installs pipx, Quarto and texlive packages
COPY ./requirements.txt /tmp/requirements.txt
RUN python -m pip install --user pipx && \
    python -m pipx ensurepath && \
    # Install and configure pipx packages
    pipx install nox && \
    pipx install poetry && \
    pipx install pre-commit && \
    pipx inject nox nox-poetry && \
    pipx inject poetry poetry-plugin-export && \
    pipx inject poetry poetry-plugin-shell && \
    # Install Quarto latest version
    /opt/scripts/install-quarto.sh && \
    # Install TeX Live packages
    /opt/scripts/install-texlive-packages.sh && \
    # Install pipx packages listed in requirements.txt
    /opt/scripts/pipx_install_packages.sh

# Install Node.js (required for JupyterLab 4.x extensions)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    node --version && npm --version

# Install jupyterlab and Python packages
RUN /opt/scripts/install-jupyterlab.sh && \
    # Install pip packages and jupyter extentions
    python3 -m pip install --upgrade pip && \
    python3 -m pip install jupyterlab-git && \
    python3 -m pip install nbdime && \
    python3 -m pip install jupyterhub && \
    python3 -m pip install nbstripout && \
    python3 -m pip install jupyterlab-quarto && \
    python3 -m pip install jupytext && \
    python3 -m pip install papermill && \
    python3 -m pip install ipywidgets && \
    python3 -m pip install jupyter-server-proxy && \
    python3 -m pip install pyviz_comms && \
    python3 -m pip install panel && \
    python3 -m pip install plotly && \
    python3 -m pip install geopandas && \
    python3 -m pip install ipyleaflet && \
    python3 -m pip install descartes && \
    python3 -m pip install jupyter-dash && \
    python3 -m pip install jupyterlab-lsp && \
    python3 -m pip install python-language-server[all] && \
    python3 -m pip install ipysheet && \
    python3 -m pip install fuzzywuzzy[speedup] && \
    python3 -m pip install jupyter-resource-usage && \
    python3 -m pip install ipyparallel && \
    python3 -m pip install sympy mpmath && \
    python3 -m pip install sphinx sphinx-autodoc-defaultargs sphinx-autodoc-typehints sphinx-rtd-theme && \
    python3 -m pip install pytest pytest_tornasync pytest-cov pytest-mock pre-commit-hooks jupyterlab-code-formatter black[jupyter] isort && \
    python3 -m pip install pyjstat xmltodict lxml holidays PyGithub pre-commit pyminizip rich openpyxl pyarrow python-dotenv && \
    python3 -m pip install venv-pack nbdev && \
    python3 -m pip install cx-Oracle && \
    python3 -m pip install saspy && \
    python3 -m pip install ipydatagrid && \
    python3 -m pip install dash && \
    python3 -m pip cache purge && \
    rm /tmp/requirements.txt

# Install tiny labextension to open Hub Control Panel in same tab to fix sluggish terminal loading
WORKDIR /opt/jupyter-ext/hub-control-panel-same-tab
COPY ./labextensions/hub-control-panel-same-tab /opt/jupyter-ext/hub-control-panel-same-tab
RUN npm ci || npm install && \
    npm run build && \
    jupyter labextension install . --no-build

# Disable unwanted extensions and build Lab once
RUN set -eux; \
    jupyter labextension disable @jupyterlab/docmanager-extension:download || true; \
    jupyter labextension disable @jupyterlab/filebrowser-extension:download || true; \
    jupyter labextension disable @jupyterlab/extensionmanager-extension || true; \
    jupyter labextension disable "@jupyterlab/apputils-extension:announcements" || true; \
    jupyter labextension disable "@jupyterlab/apputils-extension:layout" || true; \
    jupyter labextension disable jupyterlab-dash || true; \
    jupyter labextension disable "@dask/dask-labextension:plugin" || true; \
    jupyter labextension disable "@dask/gateway-extension:plugin" || true; \
    jupyter labextension disable "jupyterlab-kubernetes:plugin" || true; \
    jupyter lab build

WORKDIR ${WORKSPACE_DIR}

# Pull and update ca-certificates - use -p to avoid errors if directory exists
RUN mkdir -p "/usr/local/bin/start-notebook.d" && \
    echo "curl https://nexus.ssb.no/repository/certificate_repo/ssb/cert_Decrypt-CA.crt --output /usr/local/share/ca-certificates/cert_Decrypt-CA.crt" > /usr/local/bin/start-notebook.d/update-certificate.sh && \
    echo "update-ca-certificates" >> /usr/local/bin/start-notebook.d/update-certificate.sh && \
    chmod +x /usr/local/bin/start-notebook.d/update-certificate.sh

ENV ARROW_THIRDPARTY_DEPENDENCY_DIR=$FELLES/R_pakker/arrow
ENV ARROW_GCS=OFF
ENV ARROW_S3=OFF

# Copy the kernels
COPY ./kernels/ir /opt/conda/share/jupyter/kernels/ir/
COPY ./kernels/python3 /opt/conda/share/jupyter/kernels/python3/

# Allowing everyone to execute python.sh and r.sh, this is done indirectly by users
RUN chmod +x /opt/conda/share/jupyter/kernels/python3/python.sh
RUN chmod +x /opt/conda/share/jupyter/kernels/ir/r.sh

# trying to fix websockets issue and adding runtime dir inside of the container
RUN mkdir -p /tmp/jupyter-runtime && chmod 1777 /tmp/jupyter-runtime

#Prevent installation of extentions, by removing write privilege in extension folders.
RUN chmod u-w  /opt/conda/share/jupyter/labextensions
RUN chmod u-w  /opt/conda/share/jupyter/nbextensions
RUN chmod u-w  /opt/conda/share/jupyter/lab/extensions


# NSS/SSSD client (install after rocker scripts)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libpam-sss \
        libnss-sss \
        sssd-common \
        sssd-tools \
        libnss3-tools \
    apt-mark manual libpam-sss libnss-sss sssd-common sssd-tools libnss3-tools || true && \
    sed -i 's/^passwd:.*/passwd:     files sss systemd/' /etc/nsswitch.conf && \
    sed -i 's/^group:.*/group:      files sss systemd/'  /etc/nsswitch.conf && \
    sed -i 's/^shadow:.*/shadow:     files/'             /etc/nsswitch.conf && \
    rm -rf /var/lib/apt/lists/*

# adding a custom bashrc with git branch in PS1
COPY ./common-bashrc /etc/skel/.bashrc

COPY ./common-bashrc /usr/local/share/etc/bashrc.felles

# Change default R repo
COPY Rprofile.site /etc/R/Rprofile.site


# Create a symlink to the stamme_variabel file
RUN ln -s /ssb/share/etc/stamme_variabel /etc/profile.d/stamme_variabel

# Set up proxy configuration
ENV https_proxy=http://proxy.ssb.no:3128
ENV no_proxy=nexus.ssb.no,i.test.ssb.no,i.ssb.no,i.qa.ssb.no,data.ssb.no,github.com,api.github.com,codeload.github.com

# Configure Python virtual environments
ENV PIP_REQUIRE_VIRTUALENV=true
ENV POETRY_VIRTUALENVS_IN_PROJECT=true

# Setting up environment variables for pip and pipenv
ENV PIP_INDEX=https://pypi.org/pypi
ENV PIP_INDEX_URL=https://pypi.org/simple
ENV PIPENV_PYPI_MIRROR=$PIP_INDEX_URL
ENV PIP_TRUSTED_HOST=pypi.org
RUN pip config set global.index https://pypi.org/pypi --global && \
    pip config set global.index-url https://pypi.org/simple --global && \
    pip config set global.trusted-host pypi.org --global


USER $NB_UID